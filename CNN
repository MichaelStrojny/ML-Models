import torch
import torch.nn as nn
import torch.nn.functional as func

# reduces 3or4-dimensional tensor to 2D tensor (batch, x) suitable for NNs while preserving spatial relationships. How to Use:
# Step 1: create neural network "Model()"
# Step 2: optimize the following Model((CNN(input))

class CNN(nn.Module):
    def __init__(self, input_chan, output_nodes, filter_size=3, num_filters=32, pool_size=2):
        super(CNN, self).__init__()

        self.fcNN = None    #will be defined later
        self.num_filters = num_filters
        self.output_nodes = output_nodes

        self.conv = nn.Conv2d(in_channels=input_channels, out_channels=num_filters, kernel_size=filter_size)
        
        self.pool = nn.MaxPool2d(kernel_size=pool_size)
        
        x = self.pool(func.relu(self.conv(x)))    # calc layer before fc so we can calcualate flat size

        if self.fcNN is None:     #initialized at first input to match dims of flattened convolution output
            self.flat_size = x.numel() // x.shape[0]  # total elements in tensor / batch size = to get size of dimension 1 of flattened tensor
            self.fcNN = nn.Sequential(
                nn.Linear(self.flat_size, 128),     # 128 = random value. Can change if you wish
                nn.ReLU(),
                nn.Linear(128, self.output_nodes),
                nn.Softmax(dim=1)
            )

        x = x.view(x.size(0), -1)   #flatten
        
        x = self.fc(x)
        
        return x
